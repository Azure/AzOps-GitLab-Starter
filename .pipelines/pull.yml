#Syncs Azure with the repo based off a schedule and after every 'Deploy' job.
#Updates the repo with the latest changes from Azure keeping them in sync.
.Pull:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
  script: |
    echo -e "\e[1;33m\e[0Ksection_start:`date +%s`:connect\r\e[0KPull data in\e[0m"
    pwsh -f ./.scripts/Invoke-GitLabAzOpsAction.ps1 -Action Pull
    echo -e "\e[0Ksection_end:`date +%s`:connect\r\e[0K"

    echo -e "\e[1;33m\e[0Ksection_start:`date +%s`:diff\r\e[0KDiff - Check for changes\e[0m"
    #Change remote URL to insert the token needed for write permission to the repo

    git remote set-url origin "https://gitlab-ci-token:${CI_CD_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git" #
    git config user.name AzOps_automation
    git config user.email 'azops[bot]@users.noreply.gitlab.com'
    #Create a new branch for the pull
    git checkout -b $branch
     #Check for changes, if changes detected, continue, else exit
    STATUS=$(git status --short)
    echo $STATUS
    echo -e "\e[0Ksection_end:`date +%s`:diff\r\e[0K"

    echo -e "\e[1;33m\e[0Ksection_start:`date +%s`:merge\r\e[0KIf changes detected created merge request and merge\e[0m"
    if [ -z "$STATUS" ]
     then
      continue="No changes detected"
      echo $continue
     else
       git add "./$folder"
       #Commit changes to the new branch and push
       git commit -m "$commit_message"
       git push origin $branch -f


       #Create a pull request, auto approve and merge it back into the "main" branch, squash and delete source branch.
       pwsh -f ./.scripts/Invoke-GitLabAzOpsAction.ps1 -Action Pull-Complete
     fi
     echo -e "\e[0Ksection_end:`date +%s`:merge\r\e[0K"
